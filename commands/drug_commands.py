import datetime
import discord
from discord import app_commands
import asyncio
import random
from data_config import RECEPTY, VYROBA_COOLDOWN, DROGY_SEZNAM, UCINKY_DROG, VECI_SEZNAM
from utils import get_or_create_user, is_admin, has_permission, hraci

async def setup_drug_commands(tree, bot):

    async def autocomplete_drogy(interaction: discord.Interaction, current: str):
        return [
            app_commands.Choice(name=drug, value=drug)
            for drug in DROGY_SEZNAM if current.lower() in drug.lower()
        ][:25]

    async def autocomplete_veci(interaction: discord.Interaction, current: str):
        return [
            app_commands.Choice(name=vec, value=vec)
            for vec in VECI_SEZNAM if current.lower() in vec.lower()
        ][:25]

    async def autocomplete_drogy_ve_inventari(interaction: discord.Interaction, current: str):
        data = get_or_create_user(interaction.user.id)
        drogy = data.get("drogy", {})
        options = [
            app_commands.Choice(name=droga, value=droga)
            for droga in drogy.keys()
            if current.lower() in droga.lower()
        ][:25]
        return options

    @tree.command(name="vyrob", description="Vyrob neleg√°ln√≠ l√°tku")
    @app_commands.describe(droga="Druh drogy", mnozstvi="Kolik gram≈Ø chce≈° vyrobit")
    @app_commands.autocomplete(droga=autocomplete_drogy)
    async def vyrob(interaction: discord.Interaction, droga: str, mnozstvi: int = 10):
        uzivatel = interaction.user

        data = get_or_create_user(uzivatel.id)

        if mnozstvi % 10 != 0 or mnozstvi <= 0:
            return await interaction.response.send_message("‚ùå V√Ωroba je mo≈æn√° pouze po 10g d√°vk√°ch (nap≈ô. 10, 20, 30...).", ephemeral=True)

        recept = RECEPTY.get(droga)
        if not recept:
            return await interaction.response.send_message("‚ùå Tato droga neexistuje.", ephemeral=True)
        nyni = datetime.datetime.utcnow()
        posledni = data.get("last_vyroba")
        if posledni:
            rozdil = (nyni - datetime.datetime.fromisoformat(posledni)).total_seconds()
            if rozdil < VYROBA_COOLDOWN * 60:
                zbyva = int((VYROBA_COOLDOWN * 60 - rozdil) / 60)
                return await interaction.response.send_message(f"‚è≥ Mus√≠≈° poƒçkat {zbyva} minut p≈ôed dal≈°√≠ v√Ωrobou.", ephemeral=True)

        veci = data.get("veci", {})
        drogy = data.get("drogy", {})
        davky = mnozstvi // 10
        for surovina, pocet in recept["suroviny"].items():
            if veci.get(surovina, 0) < pocet * davky:
                return await interaction.response.send_message(f"‚ùå Nem√°≈° dostatek `{surovina}`.", ephemeral=True)

        for nastroj, pocet in recept["nastroje"].items():
            if veci.get(nastroj, 0) < pocet:
                return await interaction.response.send_message(f"‚ùå Chyb√≠ ti n√°stroj `{nastroj}`.", ephemeral=True)

        # Prepare updates for MongoDB
        update_dict = {}

        # Spot≈ôeba surovin
        for surovina, mnozstvi_potreba in recept.get("suroviny", {}).items():
            new_amount = veci.get(surovina, 0) - (mnozstvi_potreba * davky)
            if new_amount <= 0:
                update_dict[f"veci.{surovina}"] = {"$unset": ""}
            else:
                update_dict[f"veci.{surovina}"] = new_amount

        # P≈ôid√°n√≠ dokonƒçen√© drogy
        new_drug_amount = drogy.get(droga, 0) + mnozstvi
        update_dict[f"drogy.{droga}"] = new_drug_amount

        # Update in MongoDB
        set_updates = {k: v for k, v in update_dict.items() if not isinstance(v, dict)}
        unset_updates = {k: "" for k, v in update_dict.items() if isinstance(v, dict) and "$unset" in v}

        update_operations = {}
        if set_updates:
            update_operations["$set"] = set_updates
        if unset_updates:
            update_operations["$unset"] = unset_updates

        if update_operations:
            hraci.update_one({"user_id": str(uzivatel.id)}, update_operations)

        data["last_vyroba"] = nyni.isoformat()
        celkovy_cas = recept["cas"] * davky
        await interaction.response.send_message(
            f"üß™ Zaƒçal jsi vyr√°bƒõt {mnozstvi}g `{droga}`.\n‚è≥ Dokonƒçen√≠ za {celkovy_cas} minut...", ephemeral=True)

        async def dokonci_vyrobu():
            await asyncio.sleep(celkovy_cas * 60)

            if random.random() < recept["selhani"]:
                for nastroj, pocet in recept["nastroje"].items():
                    if nastroj in veci:
                        veci[nastroj] -= pocet
                        if veci[nastroj] <= 0:
                            veci.pop(nastroj)

                try:
                    await uzivatel.send(f"‚ùå V√Ωroba {mnozstvi}g `{droga}` selhala. P≈ôi≈°el jsi o suroviny i n√°stroje.")
                except:
                    pass
                return

            try:
                await uzivatel.send(f"‚úÖ V√Ωroba dokonƒçena: {mnozstvi}g `{droga}` bylo p≈ôid√°no do invent√°≈ôe.")
            except:
                pass

        asyncio.create_task(dokonci_vyrobu())

    @tree.command(name="pozij-drogu", description="Po≈æij drogu z invent√°≈ôe a z√≠skej doƒçasn√© √∫ƒçinky")
    @app_commands.describe(
        droga="Droga, kterou chce≈° pou≈æ√≠t",
        mnozstvi="Kolik chce≈° po≈æ√≠t (nap≈ô. 0.5g, 500mg, all)"
    )
    @app_commands.autocomplete(droga=autocomplete_drogy_ve_inventari)
    async def pozij_drogu(interaction: discord.Interaction, droga: str, mnozstvi: str):
        uzivatel = interaction.user

        data = get_or_create_user(uzivatel.id)
        drogy = data.get("drogy", {})

        if droga not in drogy:
            await interaction.response.send_message("‚ùå Tuto drogu nem√°≈° v invent√°≈ôi.", ephemeral=True)
            return

        inventar_mnozstvi = drogy[droga]

        mnozstvi = mnozstvi.strip().lower()
        try:
            if mnozstvi == "all":
                mnozstvi_g = inventar_mnozstvi
            elif mnozstvi.endswith("mg"):
                mnozstvi_g = float(mnozstvi[:-2].strip()) / 1000
            elif mnozstvi.endswith("g"):
                mnozstvi_g = float(mnozstvi[:-1].strip())
            else:
                mnozstvi_g = float(mnozstvi)
        except ValueError:
            await interaction.response.send_message("‚ùå Neplatn√Ω form√°t. Zadej t≈ôeba `0.5g`, `500mg`, nebo `all`.", ephemeral=True)
            return

        if mnozstvi_g <= 0:
            await interaction.response.send_message("‚ùå Mno≈æstv√≠ mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.", ephemeral=True)
            return

        if mnozstvi_g > inventar_mnozstvi:
            await interaction.response.send_message(f"‚ùå M√°≈° pouze {inventar_mnozstvi:.2f}g `{droga}`.", ephemeral=True)
            return

        ucinky = UCINKY_DROG.get(droga, None)
        if not ucinky:
            ucinek_text = "‚ùì Nezn√°m√© √∫ƒçinky"
            priznaky = []
            trvani = 5
        else:
            ucinek_text = ucinky["base"]
            priznaky = ucinky["priznaky"]
            trvani = ucinky["trvani"]

        if mnozstvi_g >= 2.5:
            extra = "üö® **Siln√° d√°vka! Mo≈æn√© z√°chvaty, halucinace, nebo smrteln√© riziko.**"
            priznaky += ["üíÄ Dezorientace", "ü§¢ Nevolnost", "üí§ Kolaps"]
        elif mnozstvi_g >= 1.0:
            extra = "‚ö†Ô∏è **Silnƒõj≈°√≠ √∫ƒçinky. V√Ωrazn√© zmƒõny chov√°n√≠.**"
            priznaky += ["üòµ Ztr√°ta rovnov√°hy", "üí¨ Zmateƒçn√Ω projev"]
        else:
            extra = ""

        # Odebr√°n√≠ drogy z invent√°≈ôe
        if data["drogy"][droga] == mnozstvi_g:
            hraci.update_one(
                {"user_id": str(uzivatel.id)},
                {"$unset": {f"drogy.{droga}": ""}}
            )
        else:
            hraci.update_one(
                {"user_id": str(uzivatel.id)},
                {"$set": {f"drogy.{droga}": data["drogy"][droga] - mnozstvi_g}}
            )


        embed = discord.Embed(
            title=f"üíä {droga} pou≈æita",
            description=(
                f"**{interaction.user.display_name}** pr√°vƒõ po≈æil {mnozstvi_g:.2f}g `{droga}`.\n\n"
                f"üß† **√öƒçinek:** {ucinek_text}\n"
                f"‚è≥ **Doba trv√°n√≠:** {trvani * mnozstvi_g:.1f} minut (OOC)\n"
                f"{extra}\n\n"
                f"ü©∫ **P≈ô√≠znaky:**\n" + "\n".join(f"- {p}" for p in priznaky)
            ),
            color=discord.Color.purple()
        )
        await interaction.response.send_message(embed=embed)

    @tree.command(name="recepty", description="Zobraz√≠ seznam recept≈Ø pro v√Ωrobu drog")
    async def recepty(interaction: discord.Interaction):
        embed = discord.Embed(
            title="üß™ Recepty na v√Ωrobu drog",
            description="Zde je seznam v≈°ech dostupn√Ωch drog, jejich po≈æadavk≈Ø a ≈°anc√≠ na selh√°n√≠.",
            color=discord.Color.dark_red()
        )

        for droga, info in RECEPTY.items():
            suroviny = "\n".join(f"- {nazev} √ó{pocet}" for nazev, pocet in info["suroviny"].items())
            nastroje = "\n".join(f"- {nazev} √ó{pocet}" for nazev, pocet in info["nastroje"].items())
            cas = info["cas"]
            selhani = int(info["selhani"] * 100)

            embed.add_field(
                name=f"üíä {droga}",
                value=(
                    f"**üßÇ Suroviny:**\n{suroviny}\n"
                    f"**üõ†Ô∏è N√°stroje:**\n{nastroje}\n"
                    f"‚è≥ **ƒåas v√Ωroby:** {cas} minut / 10g\n"
                    f"‚ö†Ô∏è **≈†ance na selh√°n√≠:** {selhani}%"
                ),
                inline=False
            )

        await interaction.response.send_message(embed=embed)

    @tree.command(name="pridej-veci", description="P≈ôidej vƒõci do invent√°≈ôe u≈æivatele (admin)")
    @app_commands.describe(uzivatel="U≈æivatel, kter√©mu p≈ôid√°≈° vƒõci", vec="N√°zev vƒõci", mnozstvi="Poƒçet kus≈Ø")
    @app_commands.autocomplete(vec=autocomplete_veci)
    async def pridej_veci(interaction: discord.Interaction, uzivatel: discord.Member, vec: str, mnozstvi: int):
        if not is_admin(interaction.user):
            await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
            return


        data = get_or_create_user(uzivatel.id)
        veci = data.get("veci", {})
        veci[vec] = veci.get(vec, 0) + mnozstvi
        data["veci"] = veci

        hraci.update_one(
            {"user_id": str(uzivatel.id)},
            {"$set": {f"veci.{vec}": veci[vec]}}
        )

        await interaction.response.send_message(f"‚úÖ P≈ôid√°no {mnozstvi}√ó `{vec}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)

    @tree.command(name="pridej-drogy", description="P≈ôidej drogy do invent√°≈ôe u≈æivatele (admin)")
    @app_commands.describe(uzivatel="U≈æivatel, kter√©mu p≈ôid√°≈° drogy", droga="N√°zev drogy", mnozstvi="Poƒçet gram≈Ø")
    @app_commands.autocomplete(droga=autocomplete_drogy)
    async def pridej_drogy(interaction: discord.Interaction, uzivatel: discord.Member, droga: str, mnozstvi: int):
        if not is_admin(interaction.user):
            await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
            return


        data = get_or_create_user(uzivatel.id)
        drogy = data.get("drogy", {})
        drogy[droga] = drogy.get(droga, 0) + mnozstvi
        data["drogy"] = drogy

        hraci.update_one(
            {"user_id": str(uzivatel.id)},
            {"$set": {f"drogy.{droga}": drogy[droga]}}
        )

        await interaction.response.send_message(f"‚úÖ P≈ôid√°no {mnozstvi}g `{droga}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)

    async def autocomplete_odeber_veci(interaction: discord.Interaction, current: str):
        uzivatel = None
        for option in interaction.data.get("options", []):
            if option["name"] == "uzivatel":
                try:
                    uzivatel = await interaction.guild.fetch_member(option["value"])
                except:
                    pass
                break
        if not uzivatel:
            return []


        data = get_or_create_user(uzivatel.id)
        veci = data.get("veci", {})
        return [
            app_commands.Choice(name=vec, value=vec)
            for vec in veci.keys() if current.lower() in vec.lower()
        ][:25]

    async def autocomplete_odeber_drogy(interaction: discord.Interaction, current: str):
        uzivatel = None
        for option in interaction.data.get("options", []):
            if option["name"] == "uzivatel":
                try:
                    uzivatel = await interaction.guild.fetch_member(option["value"])
                except:
                    pass
                break
        if not uzivatel:
            return []


        data = get_or_create_user(uzivatel.id)
        drogy = data.get("drogy", {})
        return [
            app_commands.Choice(name=droga, value=droga)
            for droga in drogy.keys() if current.lower() in droga.lower()
        ][:25]

    @tree.command(name="odeber-veci", description="Odeber vƒõci z invent√°≈ôe u≈æivatele (admin/policie)")
    @app_commands.describe(uzivatel="U≈æivatel, kter√©mu odebere≈° vƒõci", vec="N√°zev vƒõci", mnozstvi="Poƒçet kus≈Ø")
    @app_commands.autocomplete(vec=autocomplete_odeber_veci)
    async def odeber_veci(interaction: discord.Interaction, uzivatel: discord.Member, vec: str, mnozstvi: int):
        if not has_permission(interaction.user):
            await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
            return


        data = get_or_create_user(uzivatel.id)
        veci = data.get("veci", {})
        if vec not in veci or veci[vec] < mnozstvi:
            await interaction.response.send_message(f"‚ùå U≈æivateli {uzivatel.display_name} chyb√≠ {mnozstvi}√ó `{vec}`.", ephemeral=True)
            return

        if veci[vec] <= mnozstvi:
            hraci.update_one(
                {"user_id": str(uzivatel.id)},
                {"$unset": {f"veci.{vec}": ""}}
            )
        else:
            hraci.update_one(
                {"user_id": str(uzivatel.id)},
                {"$set": {f"veci.{vec}": veci[vec] - mnozstvi}}
            )

        await interaction.response.send_message(f"‚úÖ Odebr√°no {mnozstvi}√ó `{vec}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)

    @tree.command(name="odeber-drogy", description="Odeber drogy z invent√°≈ôe u≈æivatele (admin/policie)")
    @app_commands.describe(uzivatel="U≈æivatel, kter√©mu odebere≈° drogy", droga="N√°zev drogy", mnozstvi="Poƒçet gram≈Ø")
    @app_commands.autocomplete(droga=autocomplete_odeber_drogy)
    async def odeber_drogy(interaction: discord.Interaction, uzivatel: discord.Member, droga: str, mnozstvi: int):
        if not has_permission(interaction.user):
            await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
            return


        data = get_or_create_user(uzivatel.id)
        drogy = data.get("drogy", {})
        if droga not in drogy or drogy[droga] < mnozstvi:
            await interaction.response.send_message(f"‚ùå U≈æivateli {uzivatel.display_name} chyb√≠ {mnozstvi}g `{droga}`.", ephemeral=True)
            return

        if drogy[droga] <= mnozstvi:
            hraci.update_one(
                {"user_id": str(uzivatel.id)},
                {"$unset": {f"drogy.{droga}": ""}}
            )
        else:
            hraci.update_one(
                {"user_id": str(uzivatel.id)},
                {"$set": {f"drogy.{droga}": drogy[droga] - mnozstvi}}
            )

        await interaction.response.send_message(f"‚úÖ Odebr√°no {mnozstvi}g `{droga}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)